{
  "rules": [
    {
      "name": "状态映射对象",
      "prefix": "statusmap",
      "body": [
        "/**",
        " * 状态映射对象",
        " * @type {Object} 状态值到${1:目标}的映射",
        " */",
        "const ${2:statusMap} = {",
        "  'normal': '${3:正常}',",
        "  'warning': '${4:警告}',",
        "  'error': '${5:错误}',",
        "  'info': '${6:信息}'",
        "};",
        "",
        "// 获取对应状态的值",
        "const get${7:Status} = (status) => {",
        "  return ${2:statusMap}[status] || ${2:statusMap}.normal;",
        "};"
      ],
      "description": "创建状态映射对象和获取函数"
    },
    {
      "name": "Vue组件模板",
      "prefix": "vuecomp",
      "body": [
        "<template>",
        "  <div class=\"${1:component-name}\">",
        "    <h2>{{ title }}</h2>",
        "    <div v-if=\"loading\">加载中...</div>",
        "    <div v-else>",
        "      <!-- 内容 -->",
        "    </div>",
        "  </div>",
        "</template>",
        "",
        "<script setup>",
        "import { ref, computed } from 'vue'",
        "",
        "// 定义属性",
        "const props = defineProps({",
        "  title: {",
        "    type: String,",
        "    default: '${2:默认标题}'",
        "  },",
        "  status: {",
        "    type: String,",
        "    default: 'normal'",
        "  }",
        "})",
        "",
        "// 状态显示文本映射",
        "const statusTextMap = {",
        "  'normal': '正常',",
        "  'warning': '警告',",
        "  'error': '错误'",
        "}",
        "",
        "// 计算属性 - 状态显示文本",
        "const statusText = computed(() => {",
        "  return statusTextMap[props.status] || statusTextMap.normal",
        "})",
        "",
        "// 加载状态",
        "const loading = ref(false)",
        "</script>",
        "",
        "<style lang=\"scss\" scoped>",
        ".${1:component-name} {",
        "  padding: 16px;",
        "  background-color: #f5f5f5;",
        "  border-radius: 8px;",
        "",
        "  h2 {",
        "    font-size: 18px;",
        "    margin-bottom: 16px;",
        "  }",
        "}",
        "</style>"
      ],
      "description": "创建Vue组件模板，包含状态映射"
    },
    {
      "name": "Vue Router命名规则",
      "prefix": "vueroute",
      "body": [
        "// 路由配置，使用小驼峰(camelCase)命名路由名称和路径",
        "{",
        "  path: '/${1:pathName}',  // 路径使用小驼峰，例如: userProfile, homeIndex",
        "  name: '${2:routeName}',  // 名称使用小驼峰，例如: userProfile, homeIndex",
        "  component: () => import('../views/${3:component}.vue'),",
        "}"
      ],
      "description": "Vue Router命名规则 - 路由名称和路径都应使用小驼峰命名法(camelCase)，例如'userProfile'而非'user-profile'"
    },
    {
      "name": "数组包含判断",
      "prefix": "includes",
      "body": [
        "/**",
        " * 有效的${1:类型}列表",
        " * @type {Array<string>}\n */",
        "const valid${2:Types} = [",
        "  '${3:type1}',",
        "  '${4:type2}',",
        "  '${5:type3}',",
        "  '${6:type4}'",
        "];\n",
        "// 检查${1:类型}是否有效",
        "const isValid${7:Type} = (${8:type}) => {",
        "  return valid${2:Types}.includes(${8:type});",
        "};"
      ],
      "description": "创建数组includes判断模式"
    },
    {
      "name": "HTTP状态码处理",
      "prefix": "httpstatus",
      "body": [
        "/**",
        " * HTTP状态码处理",
        " * @param {number} statusCode - HTTP状态码",
        " * @returns {string} 错误消息",
        " */",
        "const getErrorMessage = (statusCode) => {",
        "  // 状态码消息映射",
        "  const statusMessages = {",
        "    400: '请求参数错误',",
        "    401: '未授权，请重新登录',",
        "    403: '拒绝访问',",
        "    404: '请求的资源不存在',",
        "    500: '服务器内部错误'",
        "  };",
        "  ",
        "  return statusMessages[statusCode] || `未知错误: ${statusCode}`;",
        "};"
      ],
      "description": "创建HTTP状态码处理函数"
    },
    {
      "name": "SCSS变量抽离",
      "prefix": "scssvar",
      "body": [
        "// 抽离重复值为SCSS变量",
        "$${1:variable-name}: ${2:value};",
        "",
        "// 在样式中使用变量",
        ".${3:selector} {",
        "  ${4:property}: $${1:variable-name};",
        "}"
      ],
      "description": "将样式中重复出现的值抽离为SCSS变量，提高代码可维护性和一致性"
    },
    {
      "name": "Vue3 DOM引用规则",
      "prefix": "vue3ref",
      "body": [
        "// 使用ref引用获取DOM实例",
        "const ${1:elementRef} = ref(null);",
        "",
        "// 在模板中添加ref属性",
        "// <div ref=\"${1:elementRef}\">...</div>",
        "",
        "// 在方法中访问DOM实例",
        "const handleDOMOperation = () => {",
        "  if (${1:elementRef}.value) {",
        "    // 直接操作DOM实例",
        "    ${1:elementRef}.value.${2:focus()}\n    }",
        "};",
        "",
        "// 在生命周期钩子中使用",
        "onMounted(() => {",
        "  if (${1:elementRef}.value) {",
        "    // DOM实例已经可用",
        "    console.log(${1:elementRef}.value);",
        "  }",
        "});"
      ],
      "description": "在Vue 3中，使用ref引用获取和操作DOM实例，避免使用document.querySelector等DOM查询方法。这确保了代码与Vue的响应式系统保持一致，并提高了代码的可维护性和性能。"
    },
    {
      "name": "Vue3就近原则",
      "prefix": "vue3near",
      "body": [
        "// ${1:功能名称}相关",
        "const ${2:stateVar} = ref(${3:initialValue});",
        "",
        "// ${1:功能名称}操作方法",
        "const ${4:actionMethod} = () => {",
        "  ${2:stateVar}.value = ${5:newValue};",
        "  ${6:// 其他操作}",
        "};",
        "",
        "// 监听${1:功能名称}状态变化",
        "watch(${2:stateVar}, (newVal, oldVal) => {",
        "  if (newVal !== oldVal) {",
        "    ${7:// 响应状态变化}",
        "  }",
        "});"
      ],
      "description": "Vue 3组件中使用就近原则定义状态和方法。状态变量(ref/reactive)应定义在它们实际使用的功能模块前面，而不是集中在组件顶部。这提高了代码可读性和可维护性，使每个功能模块都相对独立，方便理解和修改。"
    }
  ]
}
